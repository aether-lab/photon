# Autogenerated with SMOP version 
# /Users/lalit/anaconda/bin/smop display_calculation_progress.m

from __future__ import division
try:
    from runtime import *
except ImportError:
    from smop.runtime import *

def display_calculation_progress_(current_value=None,value_vector=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 2-[current_value,value_vector].count(None)+len(args)

    progress_bar_character_number=50
    __,value_index=min_(abs_(current_value - value_vector),nargout=2)
    current_progress_decimal=value_index / length_(value_vector)
    current_text_string=generate_progress_string_(current_progress_decimal,progress_bar_character_number)
    if value_index == 1:
        fprintf_(current_text_string)
        return
    previous_progress_decimal=(value_index - 1) / length_(value_vector)
    previous_text_string=generate_progress_string_(previous_progress_decimal,progress_bar_character_number)
    if strcmp_(current_text_string,previous_text_string):
        if value_index == length_(value_vector):
            fprintf_(char('\\n'))
        return
    else:
        string_character_number=length_(current_text_string)
        first_difference_index=find_(not_(current_text_string == previous_text_string),1,char('first'))
        double_percent_indices=strfind_(current_text_string,char('%%'))
        double_percent_indices[double_percent_indices < first_difference_index]=[]
        delete_character_number=string_character_number - first_difference_index + 1 - length_(double_percent_indices)
        if value_index == 1:
            delete_character_number=0
            first_difference_index=1
        fprintf_(1,repmat_(char('\\b'),1,delete_character_number))
        fprintf_(current_text_string[first_difference_index:end()])
        if value_index == length_(value_vector):
            fprintf_(char('\\n'))
    return
def generate_progress_string_(progress_decimal=None,progress_bar_character_number=None,*args,**kwargs):
    varargin = cellarray(args)
    nargin = 2-[progress_decimal,progress_bar_character_number].count(None)+len(args)

    numerical_progress_string=sprintf_(char('% 4.0f'),round_(100 * progress_decimal))
    string_prefix=matlabarray([char('Calculation'),numerical_progress_string,char('%% Complete:     0%% [')])
    string_suffix=char('] 100%%')
    completed_character_number=round_(progress_decimal * progress_bar_character_number)
    remaining_character_number=progress_bar_character_number - completed_character_number
    progress_bar_string=matlabarray([repmat_(char('#'),1,completed_character_number),repmat_(char('-'),1,remaining_character_number)])
    text_string=matlabarray([string_prefix,progress_bar_string,string_suffix])
    return text_string
